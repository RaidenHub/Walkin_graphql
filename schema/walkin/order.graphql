type Items {
  name: String
  price: Int
  quantity: Int
  userId: String
  foodId: String
}

type Order {
  total: Int
  discount: Int
  paymentMethod: String
  paymentId: String
  userId: String
  status: String
  items: [Items]
}
# itemsInput
input ItemsInput {
  name: String
  price: Int
  quantity: Int
  userId: String
  foodId: String
}
type Query {
  getOrder(token: String): [Order]
    @rest(endpoint: "https://walk--in.herokuapp.com/order/", method: GET,
    headers:[
      {name: "Authorization", value: "Bearer $token"}
    ])
    getOrderById(id: String, token: String): Order
    @rest(endpoint: "https://walk--in.herokuapp.com/order/", method: GET,
    headers:[
      {name: "Authorization", value: "Bearer $token"}
    ])
}
type Mutation {
  addToOrder(
    name: String
    price: Int
    quantity: Int
    userId: String
    foodId: String
    items: ItemsInput
    token: String
  ): Order
    @rest(endpoint: "https://walk--in.herokuapp.com/order/", method: POST,
    headers:[
      {name: "Authorization", value: "Bearer $token"}
    ])
  updateOrder(
    id: ID
    name: String
    price: Int
    quantity: Int
    userId: String
    foodId: String
    items: ItemsInput
    token: String
  ): Order
    @rest(endpoint: "https://walk--in.herokuapp.com/order/$id", method: PUT, headers:[
      {name: "Authorization", value: "Bearer $token"}
    ])
  deleteOrder(id: ID, token: String): Order
    @rest(endpoint: "https://walk--in.herokuapp.com/order/$id", method: DELETE, headers:[
      {name: "Authorization", value: "Bearer $token"}
    ])
}
